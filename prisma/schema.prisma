generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String
  email       String   @unique
  password    String
  phoneNumber String?
  address     String?
  profilePic  String?
  userType    UserType
  userStatus  UserStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt  
  products    Product[]
  orders      Order[] @relation("UserOrders")
}

enum UserType {
  MERCHANT
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  DEACTIVATED
}

// enum ListingType {
//   SELL
//   RENT
//   SERVICE
// }

enum ListingType {
  ECOMMERCE   // Products sold directly online
  BROKERAGE   // Products listed for sale or rental, negotiated via chat
  SERVICE     // Services offered by merchants
}

enum BrokerageType {
  SALE
  RENT
}


model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String        @unique
  subcategories Subcategory[] @relation("RootCategorySubcategories")
  attributes    Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Subcategory {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  attributes  Json?

  categoryId  String
  category    Category       @relation("RootCategorySubcategories", fields: [categoryId], references: [id], onDelete: Cascade)

  parentId    String?        
  parent      Subcategory?   @relation("SubcategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Subcategory[]  @relation("SubcategoryHierarchy")  // ✅ Removed `onDelete` & `onUpdate` here

  products    Product[]

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Product {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  price          Float
  description    String?
  imageUrl       String?
  listingType    ListingType
  brokerageType  BrokerageType?
  attributes     Json

  subcategoryId  String       @db.ObjectId
  subcategory    Subcategory  @relation(fields: [subcategoryId], references: [id], onDelete: NoAction) // ✅ Fixed cyclic dependency

  userId         String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[] @relation("ProductOrders")

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Order {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  buyerId       String       @db.ObjectId
  productId     String       @db.ObjectId
  status        OrderStatus  @default(PENDING)
  totalAmount   Float 
  quantity      Int
  paymentStatus PaymentStatus @default(PENDING)  // New field to track payment status
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  buyer         User         @relation("UserOrders", fields: [buyerId], references: [id])
  product       Product      @relation("ProductOrders", fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}



